package example.micronaut

import io.micronaut.context.ApplicationContext
import io.micronaut.core.type.Argument
import io.micronaut.http.HttpResponse
import io.micronaut.http.HttpStatus
import io.micronaut.runtime.server.EmbeddedServer
import spock.lang.AutoCleanup
import spock.lang.Shared
import spock.lang.Specification
import io.micronaut.http.client.RxHttpClient
import io.micronaut.http.HttpRequest

class BintrayControllerSpec extends Specification {

    @Shared
    @AutoCleanup // <1>
    EmbeddedServer embeddedServer = ApplicationContext.run(EmbeddedServer) // <2>

    @Shared
    @AutoCleanup
    RxHttpClient client = embeddedServer.applicationContext.createBean(RxHttpClient, embeddedServer.getURL()) // <3>

    @Shared
    List<String> expectedProfileNames = ['base', 'federation', 'function', 'function-aws', 'service']

    def "Verify bintray packages can be fetched with low level HttpClient"() {
        when:
        HttpRequest request = HttpRequest.GET('/bintray/packageswithlowlevelhttpclient')

        HttpResponse<List<BintrayPackage>> rsp = client.toBlocking().exchange(request, Argument.of(List, BintrayPackage)) // <4>

        then: 'the endpoint can be accessed'
        rsp.status == HttpStatus.OK  // <5>
        rsp.body() // <6>
        rsp.body()*.name.each { String name ->
            assert name in expectedProfileNames
        }
    }

    def "Verify bintray packages can be fetched with compile-time autogenerated @Client"() {
        when:
        HttpRequest request = HttpRequest.GET('/bintray/packages')

        HttpResponse<List<BintrayPackage>> rsp = client.toBlocking().exchange(request, Argument.of(List, BintrayPackage)) // <4>

        then: 'the endpoint can be accessed'
        rsp.status == HttpStatus.OK  // <4>
        rsp.body()  // <6>
        rsp.body()*.name.each { String name ->
            assert name in expectedProfileNames
        }
    }
}